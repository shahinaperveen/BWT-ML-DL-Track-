There are 4 tasks in totals 
Tasks 1:
1. Define a class `Book` with attributes `title`, `author`, and `pages`. Include methods to get and set these attributes.
2. Create an instance of `Book` and demonstrate the use of getter and setter methods.
3. Implement a class method in the Book that calculates the reading time based on an assumed reading speed (e.g., 250 words per minute).
4. Implement inheritance by creating a subclass `Ebook` that inherits from `Book` and adds an attribute `format`. Override the `__str__()` method to display all attributes.

Submission Requirements:
- Python code file (`LMS.py`) containing the implementation of the `Book` and `Ebook` classes.
- The code must be well commented and placed inside a directory/folder named Library Management System.
- The code must be error-free with the implementation of exceptional handling.
Task 2
1. Write a Python program to read data from a text file (`data.txt`) and print its contents.
2. Implement exception handling to manage scenarios such as file not found and errors while reading from the file.
3. Create a function that writes user input to a new file (`output.txt`) and handles exceptions related to file writing.
4. Modify the file reading function to count the number of words in the file and print the result.
Submission Requirements:
- Python code file (`file handling.py`) containing the complete program.
- The code must be well commented.
- The code must be error-free with the implementation of exceptional handling.
Task 3
1. Design a Python package named `math` that includes modules for basic arithmetic operations (`addition`, `subtraction`, `multiplication`, `division`, `modulus`) with some advance mathematical operations such as exponentiation and square root.
2. Implement functions within each module to perform respective operations.
3. Create a main script (`main.py`) outside the package to demonstrate importing and using functions from the `math` package.
Submission Requirements:
- Python package (`math`) directory structure and files.
- Python script (`main.py`) demonstrating the usage of functions from the package.
- The code must be well commented.
- The code must be error-free with the implementation of exceptional handling.
Task 4
1. Create an iterator class `Countdown` that counts down from a given number to 1.
2. Implement a generator function `fibonacci_generator` that yields Fibonacci numbers up to a specified limit.
3. Implement a generator function random_number_generator that yields a sequence of random numbers between a specified range.
4. Write a Python program that uses the `Countdown` iterator, `fibonacci_generator` and random_number_generator  to demonstrate their usage.
Submission Requirements:
- Python code file (`iterators_generators.py`) containing the `Countdown` class, `fibonacci_generator` function, and the main program.
- The code must be well commented.
- The code must be error-free with the implementation of exceptional handling.
